// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// File used for testing purposes

enclave
{
    // Anonymous enum
    enum
    {
        value1 = 10,
        value2 = 50,
    };

    // Normal named enum
     enum TestEnum 
     {
        test_val1 = 0x01,
        test_val2,
        test_val3,
    };

    // Struct that contains a pointer and arrays
    // Note: [size=...] is used to provide the tooling with the information
    // necessary to codegen a method to deep copy of the struct. 
    // TODO: This is not implemented yet. Only a single memcpy of the struct is performed.  
    
    struct MyStruct0
    {
        int32_t x;
    };

    struct MyStruct1
    {
        MyStruct0 s0;
        int32_t y;
    };

    struct MyStruct_node
    {
        char data;
        MyStruct_node *next;
    };

    // non annotated or parameters noted with [in] are copied into vtl1 from vtl0 and passed to the vtl1 impl function. 
    // InOut parameters will be copied from Vtl0 to vtl1, then copied back to vtl0 upon the completion of the function
    // TODO: currently only the copying back of the return value from vtl1 to vtl0 is implemented. Copying the InOut
    // parameter back to vtl0 is still a work in progress.
    //
    // Out parameters will be interpreted as [type]** regardless of if a pointer is used or not. e.g 
    // [out] MyStruct1 or [out] MyStruct1* become _Out_ MyStruct1**. When the code is generated.
    trusted
    {

        // Test all basic type parameters
        void TrustedWithBasicTypes(
            char arg1,
            [in] wchar_t arg2,
            [in, out] float arg3,
            [out] double arg4,
            size_t arg5,
            int8_t arg6,
            int16_t arg7,
            int32_t arg8,
            int64_t arg9,
            uint8_t arg10,
            uint16_t arg11,
            uint32_t arg12,
            uint64_t arg13
        );

        // Test returning a basic type and with no parameters
        uint64_t RetChar();
        
        // Test arrays as parameters
        void ArrayChar(
            [in] char arg1[2],
            [in, out] char arg2[2][2],
            [out] char arg3[3],
        );

        // Test structs as parameters. Note a single pointer can be used on any
        // supported type, not just structs.
        MyStruct1 TrustedGetStruct1 (
            MyStruct1 arg1,
            [in] MyStruct1 arg2[5],            
            [in, out] MyStruct1* arg3,
            [out] MyStruct1* arg4,
        );
    };
};
