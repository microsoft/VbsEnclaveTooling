<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- 
            When other projects include a nuget package (e.g this one) to their vs project it is placed in <ProjectRoot>\packages\<name of nuget package>.
            The <VbsEnclavePackageDir> should always point to this folder. Our targets file (VbsEnclaveTooling.targets) will be placed in
            <ProjectRoot>\packages\<name of nuget package>\build\native. 
         -->
        <VbsEnclavePackageDir>$([System.IO.Path]::GetFullPath($(MSBuildThisFileDirectory)))..\..\</VbsEnclavePackageDir>
        <VbsEnclaveExeFilePath>$(VbsEnclavePackageDir)bin\$(Platform)\vbsenclavetooling.exe</VbsEnclaveExeFilePath>
        <VbsEnclavePackageSdkPath>$(VbsEnclavePackageDir)src\VbsEnclaveSDK</VbsEnclavePackageSdkPath>
    </PropertyGroup>

    <!-- The below targets/Items are ran at build time for any project that consumes the VbsEnclaveTooling nuget package. -->

    <!-- Only run the VbsEnclaveCodeGeneration target if the developer passed in a value for <VbsEnclaveEdlPath> -->
    <Target 
        Name="VbsEnclaveCodeGeneration" 
        BeforeTargets="Build"
        Condition="'$(VbsEnclaveEdlPath)' != ''">
        <Message Text="Generating enclave code using '$(VbsEnclaveCodeGenLanguage)'" Importance="high" />
            
        <!-- Ensure that the Edl file exists -->
        <Error Condition="!Exists('$(VbsEnclaveEdlPath)')" Text="The specified .edl file '$(VbsEnclaveEdlPath)' does not exist. Make sure the path to the .edl file is valid and inside the 'VbsEnclaveEdlPath' attribute in the packages .targets file." />
        <Error Condition="!Exists('$(VbsEnclaveExeFilePath)')" Text="Couldn't find tooling executable file '$(VbsEnclaveExeFilePath)'. Make sure the path to the executable file is valid and inside the 'VbsEnclaveExeFilePath' attribute in the packages .targets file." />

        <!-- Create output directory if it doesn't already exist -->
        <MakeDir Directories="$(VbsEnclaveGeneratedFilesDir)" />
            
        <!-- Generate the codegen files using the vbsenclavetooling-->
        <PropertyGroup> 
        <VbsEnclaveToolingExecutionCommand>
            "$(VbsEnclaveExeFilePath)" --Language "$(VbsEnclaveCodeGenLanguage)" --EdlPath "$(VbsEnclaveEdlPath)" --ErrorHandling "$(VbsEnclaveErrorHandling)" --OutputDirectory "$(VbsEnclaveGeneratedFilesDir)"
        </VbsEnclaveToolingExecutionCommand>
        </PropertyGroup>

        <Exec Command="$(VbsEnclaveToolingExecutionCommand)" />
        <Message Text="Generated '$(VbsEnclaveCodeGenLanguage)' code in output directory: '$(VbsEnclaveGeneratedFilesDir)'" Importance="high" />
    </Target>

    <!-- 
        Add the VbsEnclaveSDK include and sources files to the consuming project.
        See VS section on wildcards: https://learn.microsoft.com/cpp/build/reference/vcxproj-files-and-wildcards?view=msvc-170#move-wildcard-items-to-a-target-body
    -->
    <ItemDefinitionGroup Condition="Exists('$(VbsEnclavePackageSdkPath)')">
        <ClCompile>
            <AdditionalIncludeDirectories>$(VbsEnclavePackageDir)src\;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
        </ClCompile>
    </ItemDefinitionGroup>
    <ItemGroup Condition="Exists('$(VbsEnclavePackageSdkPath)')">
        <_WildCardClCompileFor_Cpp Include="$(VbsEnclavePackageSdkPath)\Sources\*.cpp" />
        <_WildCardClCompileFor_C Include="$(VbsEnclavePackageSdkPath)\Sources\*.c" />
    </ItemGroup>
    <Target 
        Name="AddWildCardSources"
        AfterTargets="BuildGenerateSources"
        Condition="Exists('$(VbsEnclavePackageSdkPath)')">
        <ItemGroup>
            <ClCompile Include="@(_WildCardClCompileFor_Cpp)" />
            <ClCompile Include="@(_WildCardClCompileFor_C)" />
        </ItemGroup>
    </Target>
</Project>
