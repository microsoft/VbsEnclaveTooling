<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- 
            When other projects include a nuget package (e.g this one) to their vs project it is placed in <ProjectRoot>\packages\<name of nuget package>.
            The <VbsEnclaveCodegenPackageDir> should always point to this folder. Our targets file will be placed in
            <ProjectRoot>\packages\<name of nuget package>\build\native. 
         -->
        <VbsEnclaveCodegenPackageDir>$([System.IO.Path]::GetFullPath($(MSBuildThisFileDirectory)))..\..\</VbsEnclaveCodegenPackageDir>
        <VbsEnclaveExeFilePath>$(VbsEnclaveCodegenPackageDir)bin\$(Platform)\edlcodegen.exe</VbsEnclaveExeFilePath>
        <VbsEnclavePackageEnclaveAbiPath>$(VbsEnclaveCodegenPackageDir)src\VbsEnclaveABI</VbsEnclavePackageEnclaveAbiPath>
        <VbsEnclaveDeveloperEdlFileName>$([System.IO.Path]::GetFileName('$(VbsEnclaveEdlPath)'))</VbsEnclaveDeveloperEdlFileName>
        <VbsEnclaveCodeGenAbiCppSupportLib>$(VbsEnclaveCodegenPackageDir)lib\native\$(Platform)\veil_enclave_cpp_support_lib.lib</VbsEnclaveCodeGenAbiCppSupportLib>
        <VbsEnclaveGeneratedFilesDir>$(ProjectDir)Generated Files</VbsEnclaveGeneratedFilesDir>
        <VcpkgSupportDir>$(VbsEnclaveCodegenPackageDir)vcpkg</VcpkgSupportDir>
        <FlatbuffersSupportLib>$(VcpkgSupportDir)\lib\flatbuffers.lib</FlatbuffersSupportLib>
        <FlatbuffersCompiler>$(VcpkgSupportDir)\tools\flatbuffers\flatc.exe</FlatbuffersCompiler>
        <VcpkgIncludesDir>$(VcpkgSupportDir)\include</VcpkgIncludesDir>
    </PropertyGroup>

    <!-- The below targets/Items are ran at build time for any project that consumes the VbsEnclaveTooling nuget package. -->

    <!-- Only run the VbsEnclaveCodeGeneration target if the developer passed in a value for <VbsEnclaveEdlPath> -->
    <Target
        Name="VbsEnclaveCodeGeneration"
        BeforeTargets="ClCompile;ClInclude"
        Condition="'$(VbsEnclaveEdlPath)' != ''">
        <Message Text="Generating enclave code using '$(VbsEnclaveCodeGenLanguage)'" Importance="high" />
        <!-- Ensure that the Edl file exists -->
        <Error Condition="!Exists('$(VbsEnclaveEdlPath)')" Text="The specified .edl file '$(VbsEnclaveEdlPath)' does not exist. Make sure the path to the .edl file is valid and inside the 'VbsEnclaveEdlPath' attribute in the packages .targets file." />
        <Error Condition="!Exists('$(VbsEnclaveExeFilePath)')" Text="Couldn't find tooling executable file '$(VbsEnclaveExeFilePath)'. Make sure the path to the executable file is valid and inside the 'VbsEnclaveExeFilePath' attribute in the packages .targets file." />

        <!-- Generate the codegen files using the vbsenclavetooling-->
        <PropertyGroup>
            <VbsEnclaveToolingExecutionCommand>
                "$(VbsEnclaveExeFilePath)" --Language "$(VbsEnclaveCodeGenLanguage)" --EdlPath "$(VbsEnclaveEdlPath)" --ErrorHandling "$(VbsEnclaveErrorHandling)" --OutputDirectory "$(VbsEnclaveGeneratedFilesDir)" --VirtualTrustLayer "$(VbsEnclaveVirtualTrustLayer)" --Vtl0ClassName "$(VbsEnclaveVtl0ClassName)" --Namespace "$(VbsEnclaveNamespace)" --FlatbuffersCompilerPath "$(FlatbuffersCompiler)" $(VbsEnclaveCodeGenAddSdkLinkageArg)
            </VbsEnclaveToolingExecutionCommand>
        </PropertyGroup>

        <Exec Condition="'$(VbsEnclaveSkipCodegen)' != 'true'" Command="$(VbsEnclaveToolingExecutionCommand)" />
        <Message Text="Generated '$(VbsEnclaveCodeGenLanguage)' code in output directory: '$(VbsEnclaveGeneratedFilesDir)'" Importance="high" />
    </Target>

    <ItemDefinitionGroup>
        <!-- Add the enclave ABI headers and also the generated headers to the consuming projects include path-->
        <ClCompile>
            <AdditionalIncludeDirectories>$(VcpkgIncludesDir);$(VbsEnclaveCodegenPackageDir)src\;$(VbsEnclaveGeneratedFilesDir);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
        </ClCompile>

        <Link Condition="'$(VbsEnclaveVirtualTrustLayer)' == 'Enclave'">
            <AdditionalDependencies>$(VbsEnclaveCodeGenAbiCppSupportLib);%(AdditionalDependencies)</AdditionalDependencies>
        </Link>

        <!-- define the __ENCLAVE_PROJECT__ macro in the enclave project so the enclave related ABI code lights up in the project.-->
        <ClCompile Condition="'$(VbsEnclaveVirtualTrustLayer)' == 'Enclave'">
            <PreprocessorDefinitions>__ENCLAVE_PROJECT__;%(PreprocessorDefinitions)</PreprocessorDefinitions>
        </ClCompile>

        <!-- The onecore.lib static library is required for host app projects. Add it by default to the host app-->
        <Link Condition="'$(VbsEnclaveVirtualTrustLayer)' == 'HostApp'">
            <AdditionalDependencies>onecore.lib;%(AdditionalDependencies)</AdditionalDependencies>
        </Link>
    </ItemDefinitionGroup>

    <Target Name="AddGeneratedFilesToBuild"
            BeforeTargets="ClCompile;ClInclude">
        <!-- Make sure the generated cpp files are added to build without the developer needing to explicitly add them to their project. -->
        <ItemGroup>
            <_WildCardClCompileFor_Cpp Include="$(VbsEnclaveGeneratedFilesDir)\VbsEnclave\**\*.cpp" />
            <_WildCardClCompileFor_Cpp_h Include="$(VbsEnclaveGeneratedFilesDir)\VbsEnclave\**\*.h" />
            <!-- 
                    Don't use precompiled headers for generated cpp files so projects that support precompiled
                    headers can be built with our generated code.
            -->
            <ClCompile Include="@(_WildCardClCompileFor_Cpp)">
                <PrecompiledHeader>NotUsing</PrecompiledHeader>
            </ClCompile>
            <ClInclude Include="@(_WildCardClCompileFor_Cpp_h)"  />
        </ItemGroup>
    </Target>    
</Project>
