<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- 
            When other projects include a nuget package (e.g this one) to their vs project it is placed in <ProjectRoot>\packages\<name of nuget package>.
            The <VbsEnclaveCodegenPackageDir> should always point to this folder. Our targets file will be placed in
            <ProjectRoot>\packages\<name of nuget package>\build\native. 
         -->
        <VbsEnclaveCodegenVersion Condition="'$(VbsEnclaveCodegenVersion)' == ''">0.0.0-Dev</VbsEnclaveCodegenVersion>
        <VbsEnclaveCodegenPackageDir>$([System.IO.Path]::GetFullPath($(MSBuildThisFileDirectory)))..\..\</VbsEnclaveCodegenPackageDir>
        <VbsEnclaveExeFilePath>$(VbsEnclaveCodegenPackageDir)bin\edlcodegen.exe</VbsEnclaveExeFilePath>
        <VbsEnclavePackageEnclaveAbiPath>$(VbsEnclaveCodegenPackageDir)src\VbsEnclaveABI</VbsEnclavePackageEnclaveAbiPath>
        <VbsEnclaveDeveloperEdlFileName>$([System.IO.Path]::GetFileName('$(VbsEnclaveEdlPath)'))</VbsEnclaveDeveloperEdlFileName>
        <VcpkgSupportDir>$(VbsEnclaveCodegenPackageDir)vcpkg</VcpkgSupportDir>
        <FlatbuffersCompiler>$(VcpkgSupportDir)\tools\flatbuffers\flatc.exe</FlatbuffersCompiler>
        <VcpkgIncludesDir>$(VcpkgSupportDir)\include</VcpkgIncludesDir>
    </PropertyGroup>

    <!-- Add shared target only if it exists in the nuget package. -->
    <Import Project="$(VbsEnclaveCodegenPackageDir)build\native\Microsoft.Windows.VbsEnclave.shared.targets" Condition="Exists('$(VbsEnclaveCodegenPackageDir)build\native\Microsoft.Windows.VbsEnclave.shared.targets')"/>

    <!-- The below targets/Items are ran at build time for any project that consumes the VbsEnclaveTooling nuget package. -->

    <!-- Only run the VbsEnclaveCodeGeneration target if the developer passed in a value for <VbsEnclaveEdlPath> -->
    <Target
        Name="VbsEnclaveCodeGeneration"
        BeforeTargets="ClCompile;ClInclude;AddGeneratedFilesToBuild"
        Condition="'$(VbsEnclaveEdlPath)' != ''">
        <Message Text="Generating enclave code using '$(VbsEnclaveCodeGenLanguage)'" Importance="high" />
        <!-- Ensure that the Edl file exists -->
        <Error Condition="!Exists('$(VbsEnclaveEdlPath)')" Text="The specified .edl file '$(VbsEnclaveEdlPath)' does not exist. Make sure the path to the .edl file is valid and inside the 'VbsEnclaveEdlPath' attribute in the packages .targets file." />
        <Error Condition="!Exists('$(VbsEnclaveExeFilePath)')" Text="Couldn't find tooling executable file '$(VbsEnclaveExeFilePath)'. Make sure the path to the executable file is valid and inside the 'VbsEnclaveExeFilePath' attribute in the packages .targets file." />

        <!-- Remove old generated files  -->
        <RemoveDir Directories="$(VbsEnclaveGeneratedFilesDir)\VbsEnclave" />
        
        <!-- Generate the codegen files using the vbsenclavetooling-->
        <PropertyGroup>
            <VbsEnclaveToolingExecutionCommand>
                "$(VbsEnclaveExeFilePath)" --Language "$(VbsEnclaveCodeGenLanguage)" --EdlPath "$(VbsEnclaveEdlPath)" --ErrorHandling "$(VbsEnclaveErrorHandling)" --OutputDirectory "$(VbsEnclaveGeneratedFilesDir)" --VirtualTrustLayer "$(VbsEnclaveVirtualTrustLayer)" --Vtl0ClassName "$(VbsEnclaveVtl0ClassName)" --Namespace "$(VbsEnclaveNamespace)" --FlatbuffersCompilerPath "$(FlatbuffersCompiler)" --ImportDirectories "$(VbsEnclaveImportDirectories)"
            </VbsEnclaveToolingExecutionCommand>
        </PropertyGroup>

        <Exec Command="$(VbsEnclaveToolingExecutionCommand)" />
        <Message Text="Generated '$(VbsEnclaveCodeGenLanguage)' code in output directory: '$(VbsEnclaveGeneratedFilesDir)'" Importance="high" />

    </Target>

    <ItemDefinitionGroup>
        <!-- Add the enclave ABI headers and also the generated headers to the consuming projects include path-->
        <ClCompile>
            <AdditionalIncludeDirectories>$(VcpkgIncludesDir);$(VbsEnclaveCodegenPackageDir)src\;$(VbsEnclaveGeneratedFilesDir);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
        </ClCompile>

        <!-- define the __ENCLAVE_PROJECT__ macro in the enclave project so the enclave related ABI code lights up in the project.-->
        <ClCompile Condition="'$(VbsEnclaveVirtualTrustLayer)' == 'Enclave'">
            <PreprocessorDefinitions>__ENCLAVE_PROJECT__;__VBS_ENCLAVE_CODEGEN_VERSION__="$(VbsEnclaveCodegenVersion)";%(PreprocessorDefinitions)</PreprocessorDefinitions>
        </ClCompile>

        <!-- The onecore.lib static library is required for host app projects. Add it by default to the host app-->
        <Link Condition="'$(VbsEnclaveVirtualTrustLayer)' == 'HostApp'">
            <AdditionalDependencies>onecore.lib;%(AdditionalDependencies)</AdditionalDependencies>
        </Link>
    </ItemDefinitionGroup>

    <!-- Add enclave lib properties based on the platform. -->
    <PropertyGroup Condition="'$(Platform)'=='x64' AND '$(VbsEnclaveVirtualTrustLayer)' == 'Enclave'">
        <VC_LibraryPath_Enclave>$(VC_LibraryPath_VC_x64_Desktop)\..\$(Platform)\enclave</VC_LibraryPath_Enclave>
        <VBS_Enclave_Dependencies Condition="'$(VBS_Enclave_Dependencies)' == ''">$(VC_LibraryPath_Enclave)\libcmt.lib;$(VC_LibraryPath_Enclave)\libvcruntime.lib;$(winsdk_cpp_x64_root)\um\x64\vertdll.lib;$(winsdk_cpp_x64_root)\um\x64\bcrypt.lib;$(winsdk_cpp_x64_root)\ucrt_enclave\x64\ucrt.lib</VBS_Enclave_Dependencies>
    </PropertyGroup>

    <PropertyGroup Condition="'$(Platform)'=='ARM64' AND '$(VbsEnclaveVirtualTrustLayer)' == 'Enclave'">
        <VC_LibraryPath_Enclave>$(VC_LibraryPath_VC_arm64_Desktop)\..\$(Platform)\enclave</VC_LibraryPath_Enclave>
        <VBS_Enclave_Dependencies Condition="'$(VBS_Enclave_Dependencies)' == ''">$(VC_LibraryPath_Enclave)\libcmt.lib;$(VC_LibraryPath_Enclave)\libvcruntime.lib;$(winsdk_cpp_arm64_root)\um\arm64\vertdll.lib;$(winsdk_cpp_arm64_root)\um\arm64\bcrypt.lib;$(winsdk_cpp_arm64_root)\ucrt_enclave\arm64\ucrt.lib</VBS_Enclave_Dependencies>
    </PropertyGroup>
</Project>
