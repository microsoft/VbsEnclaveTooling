// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
#pragma once 
#include <pch.h>
#include <Edl\Structures.h>

using namespace EdlProcessor;

namespace CodeGeneration
{
    static inline constexpr std::string_view c_four_spaces = "    ";

    static inline constexpr std::string_view c_developer_types_header = "DeveloperTypes.h";

    static inline constexpr std::string_view c_trust_vtl1_stubs_header = "Stubs.cpp";

    static inline constexpr std::string_view c_untrusted_vtl0_stubs_header = "Stubs.h";

    static inline constexpr std::string_view c_trusted_vtl1_impl_header = "Implementations.h";

    static inline constexpr std::string_view c_output_folder_for_generated_trusted_functions = R"(VbsEnclave\Enclave)";

    static inline constexpr std::string_view c_output_folder_for_generated_untrusted_functions = R"(VbsEnclave\HostApp)";

    static inline constexpr std::string_view c_output_module_def_file_name = "vbsenclave.def";

    static inline constexpr std::string_view c_autogen_header_string =
R"(// This file was auto-generated by VbsEnclaveTooling.exe
// Changes to this file may be lost if the file is regenerated.
)";

    static inline constexpr std::string_view c_pragma_pack = R"(#pragma pack(push, 1))";

    static inline constexpr std::string_view c_pragma_pop = R"(#pragma pack(pop))";

    static inline constexpr std::string_view c_array_initializer = "std::array<{}, {}>";

    static inline constexpr std::string_view c_in_annotation = "_In_";

    static inline constexpr std::string_view c_inout_annotation = "_Inout_";

    static inline constexpr std::string_view c_out_annotation = "_Out_";

    static inline constexpr std::string_view c_return_variable_name = "result";

    static inline constexpr std::string_view c_generated_stub_name = "\"{}_Generated_Stub\"";

    static inline constexpr std::string_view c_parameter_container_type = "ParameterContainer<{}>";

    static inline constexpr std::string_view c_parameter_container_using_statement = 
R"(            using ReturnParamsT = ParameterContainer<{}>;)";

    static inline constexpr std::string_view c_enclave_string_type = "EnclaveString";

    static inline constexpr std::string_view c_enclave_wstring_type = "WEnclaveString";

    static inline constexpr std::string_view c_parameter_container_for_initial_host_to_enclave_call = 
R"(auto forward_parameters = ParameterContainer<{}>( {} );
            using ParamsT = decltype(forward_parameters);
)";

    static inline constexpr std::string_view c_parameter_container_for_initial_enclave_to_host_call =
R"(using ParamsT = ParameterContainer<{}>;
            ParamsT* vtl0_parameters = nullptr;
            THROW_IF_FAILED(AllocateVtl0Memory(&vtl0_parameters, sizeof(ParamsT)));
            THROW_IF_NULL_ALLOC(vtl0_parameters);
            vtl0_memory_ptr<ParamsT> input_params {{ vtl0_parameters }};
)";

    // Ending {} for comma or empty string
    static inline constexpr std::string_view c_parameter_type_comma_in_back = "{}{}";

    static inline constexpr std::string_view c_parameter_type_comma_in_front = "{}{}";

    // Ending {} for comma or empty string
    static inline constexpr std::string_view c_function_actual_parameter = "{}{}"; //FunctionParameter<{}>{{ {} }}{}
        
    // Using a R("...") that contains a " character with std::format ends up adding a \" to the string.
    // instead of the double quote itself. So, as a work around we'll use the old style of declaring a multi line string.
    static inline constexpr std::string_view c_vtl0_class_start_of_file = 
"\
#pragma once\n\
#include <VbsEnclaveABI\\Host\\HostHelpers.h>\n\
#include \"DeveloperTypes.h\"\
\n\
using namespace VbsEnclaveABI;\n\
using namespace VbsEnclaveABI::Shared;\n\
using namespace VbsEnclaveABI::HostApp;\n\
using namespace DeveloperTypes;\n\
\n\
";

    static inline constexpr std::string_view c_vtl0_class_hostapp_namespace = R"(
namespace {}
{{
    namespace VTL0_Stubs
    {{
        {}
    }}
}}
)";

    // Using a R("...") that contains a " character with std::format ends up adding a \" to the string.
    // instead of the double quote itself. So, as a work around we'll use the old style of declaring a multi line string.
    static inline constexpr std::string_view c_vtl1_enclave_stub_includes = 
"\
#pragma once\n\
#include <VbsEnclaveABI\\Enclave\\EnclaveHelpers.h>\n\
#include \"Implementations.h\"\n\
\n\
using namespace VbsEnclaveABI;\n\
using namespace VbsEnclaveABI::Shared;\n\
using namespace VbsEnclaveABI::Enclave;\n\
using namespace DeveloperTypes;\n\
\n\
";

    static inline constexpr std::string_view c_vtl1_enclave_stub_namespace = R"(
// START: DO NOT MODIFY: For internal abi usage
namespace VbsEnclaveABI::Enclave::VTL0CallBackHelpers
{{
    LPENCLAVE_ROUTINE s_vtl0_allocation_function = nullptr;
    LPENCLAVE_ROUTINE s_vtl0_deallocation_function = nullptr;
    wil::srwlock s_vtl0_function_table_lock {{}};
    bool s_are_functions_registered {{}};
    std::unordered_map<std::uint32_t, std::uint64_t> s_vtl0_function_table{{}};
}}
namespace VbsEnclaveABI::Enclave::MemoryChecks
{{
    LPCVOID s_enclave_memory_begin = nullptr; // inclusive
    LPCVOID s_enclave_memory_end = nullptr;   // exclusive
    std::atomic<bool> s_memory_bounds_calculated = {{}};
}}
// END: DO NOT MODIFY: For internal abi usage
namespace {}
{{
    namespace VTL1_Stubs
    {{
    {}
    }}
}}
)";

    static inline constexpr std::string_view c_outer_abi_function = R"(
        {} CALLBACK {}_Generated_Stub(void* function_context)
        try
        {{
            {}
            LOG_IF_FAILED(hr);
            return ABI_HRESULT_TO_PVOID(hr);
        }}
        catch (...)
        {{
            HRESULT hr = wil::ResultFromCaughtException();
            LOG_IF_FAILED(hr);
            return ABI_HRESULT_TO_PVOID(hr);
        }}
)";

    // This body is specific to the developer function
    static inline constexpr std::string_view c_inner_abi_function =
        R"(using ParamsT = FlatbuffersDevTypes::{}T;
            using ReturnParamsT = FlatbuffersDevTypes::{}T;
            {})";

    // This body is specific to the developer function
    static inline constexpr std::string_view c_initial_caller_function_body = R"(
        {}
        {{
            {}
            auto function_result = ReturnParamsT();
            {}
            {}
        }}
)";

    static inline constexpr std::string_view c_vtl0_call_to_vtl1_export =
 R"(THROW_IF_FAILED((CallVtl1ExportFromVtl0<ReturnParamsT>(m_enclave, {}, flatbuffer_builder, function_result)));)";

    static inline constexpr std::string_view c_vtl1_call_to_vtl1_export =
 R"(HRESULT hr = CallVtl1ExportFromVtl1<ParamsT, decltype(AbiDefinitions::{}_Abi_Impl)>(function_context, AbiDefinitions::{}_Abi_Impl);)";

    static inline constexpr std::string_view c_vtl0_call_to_vtl0_callback =
 R"(HRESULT hr = CallVtl0CallbackImplFromVtl0<ParamsT, ReturnParamsT, decltype({}_Abi_Impl)>(function_context, {}_Abi_Impl);)";

    static inline constexpr std::string_view c_vtl1_call_to_vtl0_callback =
 R"(THROW_IF_FAILED((CallVtl0CallbackFromVtl1<ParamsT, ReturnParamsT>({}U, flatbuffer_builder, function_result)));)";

    // Using a R("...") that contains a " character with std::format ends up adding a \" to the string.
    // instead of the double quote itself. So, as a work around we'll use the old style of declaring a multi line string.
    static inline constexpr std::string_view c_vtl1_enclave_func_impl_start_of_file =
"\
#pragma once\n\
#include <VbsEnclaveABI\\Enclave\\EnclaveHelpers.h>\n\
#include \"DeveloperTypes.h\"\n\
\n\
using namespace VbsEnclaveABI;\n\
using namespace VbsEnclaveABI::Shared;\n\
using namespace VbsEnclaveABI::Enclave;\n\
using namespace DeveloperTypes;\n\
\n\
";

    static inline constexpr std::string_view c_vtl1_enclave_func_impl_namespace = R"(
namespace {}
{{
    namespace VTL1_Declarations
    {{
        {}
    }}

    namespace VTL0_Callbacks
    {{
        {}
    }}

    namespace AbiDefinitions
    {{
        {}
    }}
}}
)";

    // Using a R("...") that contains a " character with std::format ends up adding a \" to the string.
    // instead of the double quote itself. So, as a work around we'll use the old style of declaring a multi line string.
    static inline constexpr std::string_view c_developer_types_start_of_file = 
"\
{}\n\
#pragma once\n\
#include <VbsEnclaveABI\\Shared\\VbsEnclaveAbiBase.h>\n\
#undef max // prevent windows max macro from conflicting with flatbuffers macro\n\
#include \"vbsenclave_flatbuffer_support_generated.h\"\n\
\n\
";

    static inline constexpr std::string_view c_developer_types_namespace = R"(
namespace DeveloperTypes
{{
{}
}}
)";

    static inline constexpr std::string_view c_enclave_def_file_content = R"(
{}
LIBRARY

    EXPORTS
{}
)";

    static inline constexpr std::string_view c_vtl0_class_constructor = 
R"({}(LPVOID enclave) : m_enclave(enclave)
            {{
            }}
)";

    static inline constexpr std::string_view c_vtl0_class_add_callback_member = R"(
        private:
            LPVOID m_enclave{{}};
            bool m_callbacks_registered{{}};
            wil::srwlock m_register_callbacks_lock{{}};
            std::array<uintptr_t, {}> m_callbacks{{ {} }};
)";

    static inline constexpr std::string_view c_setup_return_params_tuple_for_vtl0_enclave_to_host = R"(
            auto& return_params_tuple = function_result.m_returned_parameters->m_members;
            {}
            {}
)";
    static inline constexpr std::string_view c_setup_return_params_tuple_for_vtl0_hostapp_to_enclave = R"(
            auto& return_params_tuple = function_result.m_returned_parameters->m_members;
            {}
)";

    static inline constexpr std::string_view c_return_value_to_initial_caller = R"(
            constexpr size_t tuple_size = std::tuple_size<std::remove_reference_t<decltype(return_params_tuple)>>::value;
            return std::get<tuple_size - 1>(return_params_tuple); // the last parameter is always the function return value.
)";

    static inline constexpr std::string_view c_scope_ending_brackets = "}";

    static inline constexpr std::string_view c_vtl1_register_callback_function = "VTL0CallBackHelpers::AddVtl0FunctionsToTable";

    static inline constexpr std::string_view c_generated_abi_impl_function = R"(
        static inline void {}_Abi_Impl{}
        {{
            {}
        }}
)";

    static inline constexpr std::string_view c_generated_abi_impl_function_with_return_value = R"(
        static inline {} {}_Abi_Impl{}
        {{
            {}
        }}
)";

    static inline constexpr std::string_view c_generated_internal_abi_impl_function = R"(
        void {}_Abi_Impl{}
        {{
            {}
        }}
)";

    static inline constexpr std::string_view c_abi_func_return_value_for_enclave_to_host =
R"(auto result = {}({});
{})";

    static inline constexpr std::string_view c_abi_func_return_value_for_host_enclave =
R"(            auto result = {}({});
{})";
    static inline constexpr std::string_view c_abi_func_return_null_when_void = R"(
            {}({});
            {}
)";

    static inline constexpr std::string_view c_setup_copy_of_return_parameters_host_to_enclave = R"(
            using ReturnParamsT = ParameterContainer<{}>;
            {}
            auto new_return_params = ReturnParamsT({});
            auto& return_params_tuple = new_return_params.m_members;
            void* new_return_params_ptr = AllocateMemory(sizeof(ReturnParamsT));
            THROW_IF_NULL_ALLOC(new_return_params_ptr);
            memcpy_s(new_return_params_ptr, sizeof(ReturnParamsT), &new_return_params, sizeof(ReturnParamsT));
            *return_params = reinterpret_cast<ReturnParamsT*>(new_return_params_ptr);)";

    static inline constexpr std::string_view c_setup_copy_of_return_parameters_enclave_to_host = R"(
            using ReturnParamsT = ParameterContainer<{}>;
            auto new_return_params = ReturnParamsT({});
            auto& return_params_tuple = new_return_params.m_members;
            void* new_return_params_ptr = AllocateMemory(sizeof(ReturnParamsT));
            THROW_IF_NULL_ALLOC(new_return_params_ptr);
            memcpy_s(new_return_params_ptr, sizeof(ReturnParamsT), &new_return_params, sizeof(ReturnParamsT));

            *return_params = reinterpret_cast<ReturnParamsT*>(new_return_params_ptr);)";

    static inline constexpr std::string_view c_vtl0_call_developer_impl = "{}";

    static inline constexpr std::string_view c_vtl1_call_developer_impl = "VTL1_Declarations::{}";

    static inline constexpr std::string_view c_copy_non_pointer_value_to_param = R"(
            {} = {};)";

    static inline constexpr std::string_view c_get_return_tuple_value = "std::get<{}>(return_params_tuple)";

    static inline constexpr std::string_view c_get_vlt1_forward_tuple_value = "std::get<{}>(vtl1_parameters.m_members)";

    static inline constexpr std::string_view c_std_get_vtl1_input_tuple_value_for_enclave_to_host = "std::get<{}>(vtl0_parameters->m_members)";

    static inline constexpr std::string_view c_std_get_vtl0_input_tuple_value_for_host_to_enclave = "std::get<{}>(vtl1_parameters.m_members)";

    static inline constexpr std::string_view c_allocate_memory_callback_to_address = "reinterpret_cast<uintptr_t>(&VbsEnclaveABI::HostApp::AllocateVtl0MemoryCallback)";

    static inline constexpr std::string_view c_deallocate_memory_callback_to_address = ",reinterpret_cast<uintptr_t>(&VbsEnclaveABI::HostApp::DeallocateVtl0MemoryCallback)";

    static inline constexpr std::string_view c_callback_to_address = ", reinterpret_cast<uintptr_t>(&{}_Generated_Stub)";

    static inline constexpr std::string_view c_untrusted_function_name = "{}_callback";

    static inline constexpr std::string_view c_exported_function_in_module = 
R"(     {}_Generated_Stub
)";

    static inline constexpr std::string_view c_empty_return = "return;";

    static inline constexpr std::string_view c_abi_return_param_declaration = "{}_Out_ {}** return_params";

    static inline constexpr size_t c_number_of_abi_callbacks = 2;

    static inline constexpr std::string_view c_vtl0_enclave_class_name = "{}Wrapper";

    static inline constexpr std::string_view c_vtl0_enclave_class_public_keyword = R"(
        public:
)";

    static inline constexpr std::string_view c_vtl0_enclave_class_private_keyword = R"(
        private:
)";

    static inline constexpr std::string_view c_vtl1_copy_input_params_to_vtl0_buffer = R"(

        ParamsT* vtl0_parameters = nullptr;
        CopyVTL1MemoryIntoVTL0AllocatedMemory(&vtl0_parameters, &forward_parameters, sizeof(forward_parameters));
        vtl0_memory_ptr<ParamsT> input_params {{ vtl0_parameters }};
        {}
)";

    static inline constexpr std::string_view c_vtl1_copy_input_params_to_vtl1_buffer = 
R"(            ParamsT vtl1_parameters = ParamsT();
)";

    static inline constexpr std::string_view c_vtl1_abi_function_call_to_dev_impl = "std::apply";

    static inline constexpr std::string_view c_vtl1_parameter_tuple_name_to_forward = "VTL1_Declarations::{}, vtl1_parameters.m_members";

    static inline constexpr std::string_view c_copy_param_into_vtl1_heap_from_vtl0 = R"(
            CopyVTL0MemoryIntoVTL1AllocatedMemory(&{}, {}, {});
            wil::unique_process_heap_ptr<{}> free_{}_vtl1 {{ {} }};
)";

    static inline constexpr std::string_view c_copy_out_param_into_vtl1_heap_from_vtl0 = R"(
            PerformAllocationForOutParam(&{}, sizeof({}));
            heap_memory_double_ptr<{}> free_{}_vtl1 {{ {} }};
)";

    static inline constexpr std::string_view c_assign_tuple_value_to_parameter = R"(
            {} = {};
)";
    static inline constexpr std::string_view c_copy_value_param_function = R"(
            UpdateValue(&{}, &{}, {});
)";

    static inline constexpr std::string_view c_copy_vtl1_param_ptr_into_vtl0_no_alloc = R"(
            THROW_IF_FAILED(EnclaveCopyOutOfEnclave({}, {}, {}));
)";

    static inline constexpr std::string_view c_copy_vtl1_out_param_ptr_into_vtl0_no_alloc = R"(
            CopyVTL1MemoryIntoVTL0AllocatedMemory({}, *{}, {});
)";

    static inline constexpr std::string_view c_copy_vtl0_param_into_vtl1_without_allocation = R"(
            THROW_IF_FAILED(EnclaveCopyIntoEnclave({}, {}, {}));
)";

    static inline constexpr std::string_view c_copy_out_param_with_allocation_vtl1 = R"(
            CopyVTL0MemoryIntoVTL1AllocatedMemory({}, *{}, {});
)";

    static inline constexpr std::string_view c_allocate_vtl0_param_and_copy_vtl1_memory_into_it = R"(
            CopyVTL1MemoryIntoVTL0AllocatedMemory(&{}, {}, {});
            vtl0_memory_ptr<{}> free_{}_vtl0 {{ {} }};
)";

    static inline constexpr std::string_view c_allocate_vtl0_out_param_and_copy_vtl1_memory_into_it = R"(
            PerformVtl0AllocationForOutParam(&{}, sizeof({}**));
            THROW_IF_NULL_ALLOC({});
            heap_memory_double_ptr<{}, Vtl0DoublePtrDeleter<{}>> free_{}_vtl0 {{ {} }};
)";

    static inline constexpr std::string_view c_allocate_memory_for_out_param = R"(
            *{} = static_cast<{}*>(AllocateMemory({}));
            THROW_IF_NULL_ALLOC(*{}); // Developer must free.
)";

    static inline constexpr std::string_view c_copy_value_func_size_t_param = "sizeof({})";

    static inline constexpr std::string_view c_count_statement = "sizeof({}) * {}";

    static inline constexpr std::string_view c_void_ptr = "void*";

    static inline constexpr std::string_view c_static_void_ptr = "static inline void*";

    static inline constexpr std::string_view c_static_declaration = R"(
        static {} {}{};
)";

    static inline constexpr std::string_view c_function_declaration = R"(
        {} {}{};
)";

    static inline constexpr std::string_view c_void_function_declaration = "void {} {}{};\n";

    static inline constexpr std::string_view c_static_keyword = "static ";

    static inline constexpr std::string_view c_hresult_type = "HRESULT ";

    static inline constexpr std::string_view c_vtl0_abi_boundary_functions_comment = R"(
        /***********************************************
         *    VTL0 Generated ABI Boundary Callbacks    *
        ************************************************/
        )";

    static inline constexpr std::string_view c_vtl1_abi_boundary_functions_comment = R"(
        /***********************************************
         *    VTL1 Generated ABI Boundary Callbacks    *
        ************************************************/
        )";

    static inline constexpr std::string_view c_vtl0_abi_impl_callback_functions_comment = R"(
        /*****************************************************
         *    VTL0 Generated ABI Implementation Callbacks    *
        ******************************************************/
        )";

    static inline constexpr std::string_view c_vtl1_abi_impl_functions_comment = R"(
        /*****************************************************
         *    VTL0 Generated ABI Implementation Callbacks    *
        ******************************************************/
        )";

    static inline constexpr std::string_view c_vtl0_developer_declaration_functions_comment = R"(
        /*****************************************************
         *    VTL0 Generated Developer Method Declarations   *
        ******************************************************/
        )";

    static inline constexpr std::string_view c_vtl1_developer_declaration_functions_comment = R"(
        /*******************************************************
         *    VTL1 Generated Developer Function Declarations   *
        ********************************************************/
        )";

    static inline constexpr std::string_view c_vtl0_side_of_vtl1_developer_impl_functions_comment = R"(
        /************************************************************
         *    VTL0 Side Of VTL1 Developer Function Implementations  *
        *************************************************************/
        )";

    static inline constexpr std::string_view c_vtl1_side_of_vtl0_developer_callback_functions_comment = R"(
        /**********************************************************
         *    VTL1 Side Of VTL0 Developer Method Implementations  *
        ***********************************************************/
)";

    static inline constexpr std::string_view c_vtl0_register_callbacks_abi_function = R"(
        HRESULT RegisterVtl0Callbacks()
        {
            auto lock = m_register_callbacks_lock.lock_exclusive();

            if (m_callbacks_registered)
            {
                return S_OK;;
            }

            FlatbuffersDevTypes::AbiRegisterVtl0Callbacks_argsT input {};
            input.callbacks.resize(m_callbacks.size());
            std::copy(m_callbacks.begin(), m_callbacks.end(), input.callbacks.begin());
            flatbuffers::FlatBufferBuilder builder = PackFlatbuffer(input);
            using ReturnParamsT = FlatbuffersDevTypes::AbiRegisterVtl0Callbacks_argsT;
            ReturnParamsT out_args {};

            HRESULT hr = CallVtl1ExportFromVtl0<ReturnParamsT>(
                m_enclave,
                c_register_callbacks_abi_name,
                builder,
                out_args);
            RETURN_IF_FAILED(hr);

            if (SUCCEEDED(out_args.m__return_value_))
            {
                m_callbacks_registered = true;
            }

            return out_args.m__return_value_;
        }
)";

    static inline constexpr std::string_view c_vtl1_register_callbacks_abi_export_name = "    __AbiRegisterVtl0Callbacks__";

    static inline constexpr std::string_view c_vtl1_register_callbacks_abi_export = R"(
        void RegisterVtl0Callbacks(
            _In_ FlatbuffersDevTypes::AbiRegisterVtl0Callbacks_argsT in_params,
            _Inout_ flatbuffers::FlatBufferBuilder& flatbuffer_out_params_builder)
        {
            THROW_IF_FAILED(AddVtl0FunctionsToTable(in_params.callbacks));

            FlatbuffersDevTypes::AbiRegisterVtl0Callbacks_argsT  result{};
            result.m__return_value_ = S_OK;

            flatbuffer_out_params_builder = PackFlatbuffer(result);
        }

        void* CALLBACK __AbiRegisterVtl0Callbacks__(void* function_context)
        try
        {
            using ParamsT = FlatbuffersDevTypes::AbiRegisterVtl0Callbacks_argsT;
            HRESULT hr = CallVtl1ExportFromVtl1<ParamsT, decltype(RegisterVtl0Callbacks)>(function_context, RegisterVtl0Callbacks);
            LOG_IF_FAILED(hr);
            return ABI_HRESULT_TO_PVOID(hr);
        }
        catch (...)
        {
            HRESULT hr = wil::ResultFromCaughtException();
            LOG_IF_FAILED(hr);
            return ABI_HRESULT_TO_PVOID(hr);
        }
)";

    static inline constexpr std::string_view c_vtl0_class_structure =
        R"({}
        {}
            {}
            {}
            {}
        {}
)";

    static inline constexpr std::string_view c_dev_type_for_developer_struct = "dev_type_params";

    static inline constexpr std::string_view c_dev_type_for_function_params_struct = "dev_type_params";

    static inline constexpr std::string_view c_return_param_for_out_param_ptr = 
R"(     
            if (return_params->m_{})
            {{
                {} = std::move(return_params->m_{});
            }}
)";

    static inline constexpr std::string_view c_return_param_for_inout_param_ptr =
R"(     
            if ({} && return_params->m_{})
            {{
                *{} = *return_params->m_{};
            }}
)";

    static inline constexpr std::string_view c_return_param_for_param_non_ptr_complex =
R"(     
            {} = std::move(return_params->m_{});
)";


static inline constexpr std::string_view c_return_param_for_basic_type =
R"(     
            {} = return_params->m_{};
)";
    
    static inline constexpr std::string_view c_parameter_struct_using_statement =
R"(             using ReturnParamsT = FlatbuffersDevTypes::{}T;)";

    static inline constexpr std::string_view c_pack_params_to_flatbuffer_call =
R"(// Package in and in/out parameters into struct and convert it to a flatbuffer type.
            auto in_flatbufferT = {}::ToFlatBuffer({});
            using ParamsT = decltype(in_flatbufferT);
            auto flatbuffer_builder = PackFlatbuffer(*in_flatbufferT);
    )";

    static inline constexpr std::string_view c_abi_impl_function_parameters = "(_In_ FlatbuffersDevTypes::{}_argsT& in_flatbuffer_params, _In_ flatbuffers::FlatBufferBuilder& flatbuffer_out_params_builder)";

    static inline constexpr std::string_view c_abi_func_return_value =
R"(auto dev_type_params = {}::ToDevType(in_flatbuffer_params);
            dev_type_params->m__return_value_ = {}({});
{})";

    static inline constexpr std::string_view c_abi_func_return_when_void =
R"(auto dev_type_params = {}::ToDevType(in_flatbuffer_params);
            {}({});
{})";

    static inline constexpr std::string_view c_setup_return_params_struct = R"(
            auto flatbuffer_out_param = {}::ToFlatBuffer(*dev_type_params);
            flatbuffer_out_params_builder = PackFlatbuffer(*flatbuffer_out_param);)";

    static inline constexpr std::string_view c_setup_no_return_params_struct = R"(
            flatbuffer_out_params_builder = PackFlatbuffer<FlatbuffersDevTypes::{}T>({{}});)";

    static inline constexpr std::string_view c_setup_return_params_back_to_developer = R"(
            auto return_params = {}::ToDevType(function_result);
            {}
)";

    static inline constexpr std::string_view c_return_value_back_to_initial_caller_with_move =
R"(             
            return std::move(return_params->m__return_value_);)";

    static inline constexpr std::string_view c_return_value_back_to_initial_caller_no_move =
R"(             
            return return_params->m__return_value_;)";

    static inline constexpr std::string_view c_parameter_return_struct_using_statement =
R"(        using ReturnParamsT = FlatbuffersDevTypes::{}T;)";

    static inline constexpr std::string_view c_function_args_struct = "{}_args";
}

