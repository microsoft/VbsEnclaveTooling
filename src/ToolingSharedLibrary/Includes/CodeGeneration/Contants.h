// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
#pragma once 
#include <pch.h>
#include <Edl\Structures.h>

using namespace EdlProcessor;

namespace CodeGeneration
{
    static inline constexpr std::string_view c_four_spaces = "    ";

    static inline constexpr std::string_view c_base_header_name = "VbsEnclaveBase";

    static inline constexpr std::string_view c_base_header_name_with_ext = "VbsEnclaveBase.h";

    static inline constexpr std::string_view c_developer_types_header = "EnclaveDeveloperTypes.h";

    static inline constexpr std::string_view c_base_header_include = 
R"(
#include "VbsEnclaveBase.h"
)";

    static inline constexpr std::string_view c_default_namespace_name = "VbsEnclave";

    static inline constexpr std::string_view c_cpp_namespace_keyword = "namespace";

    static inline constexpr std::string_view c_using_namespace = "using namespace";

    static inline constexpr std::string_view c_autogen_header_string =
R"(// This file was auto-generated by VbsEnclaveTooling.exe
// Changes to this file may be lost if the file is regenerated.
)";

    constexpr inline std::string_view c_enclave_defines = R"(
#define HRESULT_TO_PVOID(hr) (PVOID)((ULONG_PTR)(hr) & 0x00000000FFFFFFFF)
#ifndef RETURN_HR_AS_PVOID
#define RETURN_HR_AS_PVOID(hr) return HRESULT_TO_PVOID(hr);
#endif
#define PVOID_TO_HRESULT(p) ((HRESULT)((ULONG_PTR)(p) & 0x00000000FFFFFFFF))
#define RETURN_PVOID_AS_HR(p) return PVOID_TO_HRESULT(p);

#define ENCLAVE_FUNCTION extern "C" PVOID WINAPI
)";

    static inline constexpr std::string_view c_default_header_includes =R"(
#pragma once
#include <array>
#include <cstdint>
#include <enclaveapi.h>
#include <string>

)";

    static inline constexpr std::string_view c_pragma_pack = R"(#pragma pack(push, 1))";

    static inline constexpr std::string_view c_pragma_pop = R"(#pragma pack(pop))"; 

    static inline constexpr std::string_view c_array_initializer = "std::array<";
}
