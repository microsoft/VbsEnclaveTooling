// This file was auto-generated by edlcodegen.exe
// Changes to this file may be lost if the file is regenerated.

#pragma once
#include <VbsEnclave\Enclave\Implementation\Trusted.h>
#include <VbsEnclave\Enclave\Abi\TypeMetadata.h>


namespace CodeGenTest
{
    namespace Abi::Definitions
    {
        
        static void EnforceMemoryRestriction()
        {
            if (ENABLE_ENCLAVE_RESTRICT_CONTAINING_PROCESS_ACCESS)
            {
                VbsEnclaveABI::Enclave::EnableEnclaveRestrictContainingProcessAccessOnce();
            }
        }

        static inline void* FuncWithAllArgs_0_Generated_Stub(void* function_context)
        try
        {
            using AbiTypeT = CodeGenTest::Abi::Types::FuncWithAllArgs_0_args;
            using FlatBufferT = FlatbufferTypes::FuncWithAllArgs_0_argsT;
            EnforceMemoryRestriction();
            HRESULT hr = VbsEnclaveABI::Enclave::CallVtl1ExportFromVtl1<AbiTypeT, FlatBufferT>(Trusted::Implementation::FuncWithAllArgs, function_context);
            LOG_IF_FAILED(hr);
            return ABI_HRESULT_TO_PVOID(hr);
        }
        catch (...)
        {
            HRESULT hr = wil::ResultFromCaughtException();
            LOG_IF_FAILED(hr);
            return ABI_HRESULT_TO_PVOID(hr);
        }

        HRESULT RegisterVtl0Callbacks(const std::vector<std::uint64_t>& callback_addresses, const std::vector<std::string>& callback_names)
        {
            RETURN_IF_FAILED(VbsEnclaveABI::Enclave::VTL0CallBackHelpers::AddVtl0FunctionsToTable(callback_addresses, callback_names));
            return S_OK;
        }

        void* __AbiRegisterVtl0Callbacks_CodeGenTest__(void* function_context)
        try
        {
            EnforceMemoryRestriction();
            HRESULT hr = VbsEnclaveABI::Enclave::CallVtl1ExportFromVtl1<VbsEnclaveABI::Shared::Converters::AbiRegisterVtl0Callbacks_args, FlatbufferTypes::AbiRegisterVtl0Callbacks_argsT>(RegisterVtl0Callbacks, function_context);
            LOG_IF_FAILED(hr);
            return ABI_HRESULT_TO_PVOID(hr);
        }
        catch (...)
        {
            HRESULT hr = wil::ResultFromCaughtException();
            LOG_IF_FAILED(hr);
            return ABI_HRESULT_TO_PVOID(hr);
        }

    };
}
