# build file for the veil soliution using the x64 and arm64 platforms
parameters:
  - name: BuildConfiguration
    type: string
  - name: CodeGenBuildVersion
    type: string
  - name: SdkBuildVersion
    type: string
  - name: OfficialBuild
    type: boolean
    default: false

jobs:
- job: Build_and_package_sdk
  displayName: 'Build veil solution and SDK nuget package'
  pool:
    type: windows
  variables:
    SdkSolution: $(Build.SourcesDirectory)\src\VbsEnclaveSDK\vbs_enclave_implementation_library.sln
    VeilHostVcxProj: $(Build.SourcesDirectory)\src\VbsEnclaveSDK\src\veil_host_lib\veil_host_lib.vcxproj
    VeilHostPackageConfig: $(Build.SourcesDirectory)\src\VbsEnclaveSDK\src\veil_host_lib\packages.config
    VeilEnclaveVcxProj: $(Build.SourcesDirectory)\src\VbsEnclaveSDK\src\veil_enclave_lib\veil_enclave_lib.vcxproj
    VeilEnclavePackageConfig: $(Build.SourcesDirectory)\src\VbsEnclaveSDK\src\veil_enclave_lib\packages.config
    NewCodeGenVersion: ${{ parameters.CodeGenBuildVersion }}
    ob_outputDirectory: '$(Build.SourcesDirectory)\signed_nuget'   
    ob_artifactBaseName: signed_sdk_nuget_package
    BuildConfiguration: ${{ parameters.BuildConfiguration }}
    SdkNugetPackageVersion: ${{ parameters.SdkBuildVersion }}
    BaseBuildDirectory: $(Build.SourcesDirectory)\_build
    SdkBuildDirectory: $(Build.SourcesDirectory)\src\VbsEnclaveSDK\_build

  steps:
   # Download the nupkg file from the codegen job
    - task: DownloadPipelineArtifact@2
      displayName: Download signed codeGenerator nupkg Artifact
      inputs:
       artifactName: 'signed_codegen_nuget_package'
       targetPath: '$(BaseBuildDirectory)'

    # Work around for Nuget restore not being able to update vcxproj projects to newer versions without the user manually updating
    # the package.config file and updating old references in vcxproj files. Unfortunately, That feature is only supported for
    # packages referenced via the <PackageReference /> property, which is only supported for csproj (C#) projects.
    # See: https://developercommunity.visualstudio.com/t/use-packagereference-in-vcxproj/351636
    - task: PowerShell@2
      displayName: 'Update CodeGen package version in Veil Host and Enclave lib packages.config and .vcxproj'
      inputs:
        targetType: 'inline'
        script: |
          $oldCodeGenVersion = "0.0.0"
          $CodeGenPackageId = "Microsoft.Windows.VbsEnclave.CodeGenerator"

          # File paths from pipeline variables
          $packagesConfigFiles = @( $env:VeilHostPackageConfig, $env:VeilEnclavePackageConfig )
          Write-Host "Updating '$CodeGenPackageId' in veil enclave and host packages.config files to version: '$env:NewCodeGenVersion'"

          # Update packages.config files
          foreach ($file in $packagesConfigFiles)
          {
            Write-Host "Updating $file"
            [xml]$xml = Get-Content $file
            $packages = $xml.packages.package

            foreach ($pkg in $packages)
            {
                if ($pkg.id -eq $CodeGenPackageId -and $pkg.version -eq $oldCodeGenVersion)
                {
                    $pkg.version = $env:NewCodeGenVersion
                }
            }

            $xml.Save($file)
            Write-Host "Updated $file successfully"
          }

          Write-Host "Updating '$CodeGenPackageId' in veil enclave and host .vcxproj files to version: '$env:NewCodeGenVersion'"
          $oldVcxprojString = "$CodeGenPackageId.$oldCodeGenVersion"
          $newVcxprojString   = "$CodeGenPackageId.$env:NewCodeGenVersion"
          $vcxprojFiles = @( $env:VeilHostVcxProj, $env:VeilEnclaveVcxProj )

          foreach ($file in $vcxprojFiles)
          {
            Write-Host "Updating $file"
            $updated = Get-Content $file | ForEach-Object {
                if ($_ -like "*$oldVcxprojString*")
                {
                    $_ -replace [regex]::Escape($oldVcxprojString), $newVcxprojString
                } 
                else
                {
                    $_
                }
            }

            $updated | Set-Content $file
            Write-Host "Updated $file successfully"
          }

          Write-Host "All files updated."

    - task: NuGetCommand@2
      displayName: NuGet restore vbs_enclave_implementation_library.sln
      inputs:
        command: 'restore'
        restoreSolution: '$(SdkSolution)'
        feedsToUse: config
        nugetConfigPath: NuGet.config

    - task: VSBuild@1
      displayName: 'Build Veil Solution x64'
      inputs:
        solution: $(SdkSolution)
        platform:  'x64'
        configuration: $(BuildConfiguration)

    - task: VSBuild@1
      displayName: 'Build Veil Solution  arm64'
      inputs:
        solution: $(SdkSolution)
        platform:  'arm64'
        configuration: $(BuildConfiguration)

    - task: NuGetToolInstaller@1
      displayName: Use NuGet 6.0.2
      continueOnError: True
      inputs:
        versionSpec: 6.0.2

    # Pack SDK nuget package
    - task: NuGetCommand@2
      displayName: 'Build SDK NuGet package'
      inputs:
        command: 'custom'
        arguments: 'pack src\VbsEnclaveSDK\src\veil_nuget\Nuget\Microsoft.Windows.VbsEnclave.SDK.nuspec -NonInteractive -OutputDirectory $(BaseBuildDirectory) -Properties target_version=$(SdkNugetPackageVersion);vbsenclave_sdk_enclave_x64_lib=$(SdkBuildDirectory)\x64\$(BuildConfiguration)\veil_enclave_lib.lib;vbsenclave_sdk_enclave_arm64_lib=$(SdkBuildDirectory)\arm64\$(BuildConfiguration)\veil_enclave_lib.lib;vbsenclave_sdk_host_x64_lib=$(SdkBuildDirectory)\x64\$(BuildConfiguration)\veil_host_lib\veil_host_lib.lib;vbsenclave_sdk_host_arm64_lib=$(SdkBuildDirectory)\arm64\$(BuildConfiguration)\veil_host_lib\veil_host_lib.lib;vbsenclave_sdk_cpp_support_x64_lib=$(SdkBuildDirectory)\x64\$(BuildConfiguration)\veil_enclave_cpp_support_lib.lib;vbsenclave_sdk_cpp_support_arm64_lib=$(SdkBuildDirectory)\arm64\$(BuildConfiguration)\veil_enclave_cpp_support_lib.lib; -Version $(SdkNugetPackageVersion) -Verbosity Detailed'

    # Sign sdk nuget package
    - task: onebranch.pipeline.signing@1
      displayName: '🔒 Onebranch signing for SDK NuGet package'
      condition: eq(${{ parameters.OfficialBuild }}, 'true')
      inputs:
        command: sign
        cp_code: 'CP-401405' # CP-code
        files_to_sign: 'Microsoft.Windows.VbsEnclave.*.nupkg'
        search_root: $(BaseBuildDirectory)

    # Copy signed sdk nupkg file to pipeline
    - task: CopyFiles@2
      displayName: publish signed SDK nupkg file
      inputs:
        SourceFolder: $(BaseBuildDirectory)
        Contents: $(BaseBuildDirectory)\Microsoft.Windows.VbsEnclave.SDK.$(SdkNugetPackageVersion).nupkg
        TargetFolder: $(ob_outputDirectory)
