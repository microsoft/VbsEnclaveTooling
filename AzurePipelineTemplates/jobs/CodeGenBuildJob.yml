# build file for the CodeGenerator soliution using the x64 and arm64 platforms
parameters:
  - name: CodeGenBuildVersion
    type: string
  - name: OfficialBuild
    type: boolean
    default: false
jobs:
- job: Build_and_package_CodeGen
  displayName: 'Build CodeGen solution and nuget package'
  pool:
    type: windows
  variables:
    CodeGenSolution: $(Build.SourcesDirectory)\VbsEnclaveTooling.sln
    VcpkgDirectory: $(Build.SourcesDirectory)\src\ToolingSharedLibrary\vcpkg_installed\x64-windows-static
    VcpkgToolsDirectory: $(VcpkgDirectory)\x64-windows\tools
    VcpkgSourcesDirectory: $(VcpkgDirectory)\x64-windows-static
    VCPKG_ROOT: '$(Pipeline.Workspace)\s\vcpkg'
    VCPKG_DEFAULT_TRIPLET: 'x64-windows'
    NewCodeGenVersion: ${{ parameters.CodeGenBuildVersion }}
    ob_outputDirectory: '$(Build.SourcesDirectory)\signed_nuget'   
    ob_artifactBaseName: signed_codegen_nuget_package 
    BaseBuildDirectory: $(Build.SourcesDirectory)\_build
    x64ReleaseBuildLocation: $(BaseBuildDirectory)\x64\Release
    x64DebugBuildLocation: $(BaseBuildDirectory)\x64\Debug
    Arm64ReleaseBuildLocation: $(BaseBuildDirectory)\ARM64\Release
    Arm64DebugBuildLocation: $(BaseBuildDirectory)\ARM64\Debug

    # veil_enclave_cpp_support_lib pack args
    VeilCppSupportLibX64Release: vbsenclave_codegen_cpp_support_x64_Release_lib=$(x64ReleaseBuildLocation)\veil_enclave_cpp_support_x64_Release_lib.lib
    VeilCppSupportPdbX64Release: vbsenclave_codegen_cpp_support_x64_Release_pdb=$(x64ReleaseBuildLocation)\veil_enclave_cpp_support_x64_Release_lib.pdb
    VeilCppSupportLibX64Debug: vbsenclave_codegen_cpp_support_x64_Debug_lib=$(x64DebugBuildLocation)\veil_enclave_cpp_support_x64_Debug_lib.lib
    VeilCppSupportPdbX64Debug: vbsenclave_codegen_cpp_support_x64_Debug_pdb=$(x64DebugBuildLocation)\veil_enclave_cpp_support_x64_Debug_lib.pdb
    VeilCppSupportLibARM64Release: vbsenclave_codegen_cpp_support_ARM64_Release_lib=$(Arm64ReleaseBuildLocation)\veil_enclave_cpp_support_ARM64_Release_lib.lib
    VeilCppSupportPdbARM64Release: vbsenclave_codegen_cpp_support_ARM64_Release_pdb=$(Arm64ReleaseBuildLocation)\veil_enclave_cpp_support_ARM64_Release_lib.pdb
    VeilCppSupportLibARM64Debug: vbsenclave_codegen_cpp_support_ARM64_Debug_lib=$(Arm64DebugBuildLocation)\veil_enclave_cpp_support_ARM64_Debug_lib.lib
    VeilCppSupportPdbARM64Debug: vbsenclave_codegen_cpp_support_ARM64_Debug_pdb=$(Arm64DebugBuildLocation)\veil_enclave_cpp_support_ARM64_Debug_lib.pdb
    
  steps:
    - checkout: Vcpkg
      path: 's\vcpkg'
      displayName: "Checkout Vcpkg"
    - script: |
        cd $(VCPKG_ROOT)
        .\bootstrap-vcpkg.bat
      displayName: "Bootstrap vcpkg"
    - script: |
        cd $(VCPKG_ROOT)
        .\vcpkg.exe integrate install
      displayName: "Integrate vcpkg into msbuild"

    - task: UseDotNet@2
      continueOnError: true
      inputs: 
        packageType: 'runtime'
        version: '6.x'
        performMultiLevelLookup: true

    - task: NuGetCommand@2
      displayName: NuGet restore VbsEnclaveTooling.sln
      inputs:
        command: 'restore'
        restoreSolution: '$(CodeGenSolution)'
        feedsToUse: config
        nugetConfigPath: NuGet.config

    - task: VSBuild@1
      displayName: Build VbsEnclaveTooling x64 release
      inputs:
        solution: $(CodeGenSolution)
        msbuildArgs: /p:VbsEnclaveCodegenVersion=$(NewCodeGenVersion)
        platform: 'x64'
        configuration: 'Release'
    
    - task: VSBuild@1
      displayName: Build VbsEnclaveTooling arm64 release
      inputs:
        solution: $(CodeGenSolution)
        msbuildArgs: /p:VbsEnclaveCodegenVersion=$(NewCodeGenVersion)
        platform: 'arm64'
        configuration: 'Release'

    - task: VSBuild@1
      displayName: Build VbsEnclaveTooling x64 debug
      inputs:
        solution: $(CodeGenSolution)
        msbuildArgs: /p:VbsEnclaveCodegenVersion=$(NewCodeGenVersion)
        platform: 'x64'
        configuration: 'Debug'
    
    - task: VSBuild@1
      displayName: Build VbsEnclaveTooling arm64 debug
      inputs:
        solution: $(CodeGenSolution)
        msbuildArgs: /p:VbsEnclaveCodegenVersion=$(NewCodeGenVersion)
        platform: 'arm64'
        configuration: 'Debug'

    # Sign binaries in build folder
    - task: onebranch.pipeline.signing@1
      displayName: '🔒 Onebranch Signing for edlcodegen executable'
      condition: eq(${{ parameters.OfficialBuild }}, 'true')
      inputs:
        command: sign
        signing_profile: external_distribution
        files_to_sign: '**/*.dll;**/*.exe'
        search_root: $(BaseBuildDirectory)

    # Sign vcpkg binaries
    - task: onebranch.pipeline.signing@1
      displayName: '🔒 Onebranch Signing for flatc executable'
      condition: eq(${{ parameters.OfficialBuild }}, 'true')
      inputs:
        command: sign 
        signing_profile: 135020002 # OSS Third party cert
        files_to_sign: '**/*.dll;**/*.exe' 
        search_root: $(VcpkgToolsDirectory)

    - task: NuGetToolInstaller@1
      displayName: Use NuGet 6.0.2
      continueOnError: True
      inputs:
        versionSpec: 6.0.2
    
    # Pack CodeGenerator nuget so SDK can access it during its build.
    - task: NuGetCommand@2
      displayName: 'Build CodeGenerator NuGet package'
      inputs:
        command: 'custom'
        arguments: 'pack src\ToolingNuget\Nuget\Microsoft.Windows.VbsEnclave.CodeGenerator.nuspec -NonInteractive -OutputDirectory $(BaseBuildDirectory) -Properties target_version=$(NewCodeGenVersion);vbsenclave_codegen_x64_exe=$(x64ReleaseBuildLocation)\edlcodegen.exe;vcpkg_sources=$(VcpkgSourcesDirectory);vcpkg_tools=$(VcpkgToolsDirectory);$(VeilCppSupportLibX64Release);$(VeilCppSupportLibX64Debug);$(VeilCppSupportLibARM64Release);$(VeilCppSupportLibARM64Debug);$(VeilCppSupportPdbX64Release);$(VeilCppSupportPdbX64Debug);$(VeilCppSupportPdbARM64Release);$(VeilCppSupportPdbARM64Debug)  -Version $(NewCodeGenVersion) -Verbosity Detailed'
    
    # Sign codegen nuget package
    - task: onebranch.pipeline.signing@1
      displayName: '🔒 Onebranch signing for CodeGen NuGet package'
      condition: eq(${{ parameters.OfficialBuild }}, 'true')
      inputs:
        command: sign
        cp_code: 'CP-401405' # CP-code
        files_to_sign: 'Microsoft.Windows.VbsEnclave.*.nupkg'
        search_root: $(BaseBuildDirectory)

    # Copy signed codegen nupkg file to pipeline
    - task: CopyFiles@2
      displayName: Publish signed code gen nupkg file
      inputs:
        SourceFolder: $(BaseBuildDirectory)
        Contents: $(BaseBuildDirectory)\Microsoft.Windows.VbsEnclave.CodeGenerator.$(NewCodeGenVersion).nupkg
        TargetFolder: $(ob_outputDirectory)
